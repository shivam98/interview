Java 8 New Features Interview Questions

Why Java 8? Main agenda behind Java 8 ?

Significant reason behind introducing java 8 was to introduce Conciseness(shortness) in the code.

Java brings in functional programming which is enabled by lambda expressions (a powerful tool to create
concise code base).

If you have ever observed with python, scala, we can do the same thing in very less LOC. By mid 20s,
Java lost a large market due to these languages. To prevent further loss java upgraded itself from only
OOPs language to concepts of FP to create concise code base.

Main advantages - 
- Compact code
- More readable and reusable code
- More testable code
- Parallel operations

----------------------------------------------------
What are the new features that got introduced in JAVA8 ?

1. Lambda Expressions.
2. Stream API.
3. Default methods in interface.
4. Static methods.
5. Functional Interface.
6. Optionals.
7. Method References.
8. Date API.
9. Nashorn, Javascript Engine.
[LSD, SFO, MDN]

----------------------------------------------------

 
what are lambda expressions ?
lambda expression is an anonymous function (without name, without return type and access modifier
and having one lambda (->) symbol)
eg:
public void add(int a, int b) {
    syso(a+b);
}
with lambda expression :
(a,b)-> syso(a+b); // using biconsumer(functional interface taking 2 args and returning nothing).

BiConsumer<Integer, Integer> biconsumer = (a,b)-> syso(a+b);
biconsumer.accept(2,4); // this is how to call this lambda expression.

----------------------------------------------------
what are functional interfaces? 

Functional interfaces are those interfaces which can have only one abstract method.
It can have any number of static method, default methods. No restriction on that.
There are many functional interfaces already present in Java such as eg. Comparable, Runnable.
lambda expressions are actually referenced by functional interfaces(eg. BiConsumer).

----------------------------------------------------

Can you create your own functional interface ?
As we know functional interface is an interface with exactly one Single Abstract method and
can have many multiple static or default methods.

To create our own Functional interface, You can do the following steps:
- create an interface.
- Annotate that with @FunctionalInterface.
- Define exactly one abstract method.
- There is no restriction on number of static or default methods.

Java can implicitly identify functional interface but still you can also annotate it with
@FunctionalInterface. It just gives you security that in case if you by mistake add 2 abstract methods
then compiler will throw compile time error.

----------------------------------------------------

What is method referencing in Java8 ?

Method referencing is a replacement of lambda expression. It is used to refer method of Functional Interface
to an existing method. Mainly it is used for code reusability.

Functional Interface's Abstract method can be mapped to a specific existing method using Double
colon operator(::). This is method reference.
Hence method reference is an alternative of lambda expression.

whenever we have existing implementation of Abstract method of our functional interface then we
go for method referencing. If no such method like testImplementation() is available then go for 
lambda expression.

Code ex :

public class MethodReferenceDemo{
    psvm() {
        // with method referencing(can be reused) -
        FunctionalInterfaceDemo functionalinterfaceDemo = Test :: testImplementation;
        functionalinterfaceDemo.singleAbstractmethod();
        // with lambda expression -
        //FunctionalInterfaceDemo functionalinterfaceDemo = ()-> syso("implementation of single abs method");
        // f.singleAbstractmethod();
    }
}
public class Test{
    public static void testImplementation(){
        syso("this is implementation of your abs method that can be reused.");
    }
}
@FunctionalInterface
interface FunctionalInterfaceDemo {
    //...
}
----------------------------------------------------
What are default methods ?

Default method is a way for adding new methods to the interface without affecting the implementing
classes. Hence with this new feature Java people defended many compile time errors that may arise
due to unimplemented methods of interface.
eg.
interface Animal{
    void legs();
    default void eyes(){
        syso("2 eyes");
    }
}
the use of these default methods is backward compatibilty which means if JDK modifies any Interface(
without default method) then the classes which implement this Interface will break.
on the other hand if you add the default method in an interface then you will be able to provide the
default implementation in the interface itself. this wont affect the implementing classes.
----------------------------------------------------


Is it necessary to override default methods ?

default methods have dummy implementation.If you want to use that dummy implementation in your implementing
class then you can use it, or else if you want to provide your implementation that also you can do.

----------------------------------------------------
Is default keyword an access modifier ?

default is not the access modifier like public or protected or private.
For default access modifier we dont use any keyword.

Hence default keyword was only used in classes till 1.8 version for switch case only but never in interface.
Now its used for default methods in interface to provide a default implementation for all implementing 
classes to use.

----------------------------------------------------
How to override a default method ?

public interface InterfaceDemo{
    default void printName() {
        syso("welcome to code decode");
    }
}

Just keep the method signature(method name+ arg) same in the implementing class and provide your 
own implementation. dont use default keyword before method in the implementing class as it will give 
error(its used for switch cases in places other than interface).
Also, use public access specifier in implenting class for the method, because you cant reduce
the visibility of method from public(interface) to anything less than public(default, protected,private).

Note: in java8 by default all methods are public, all variables are public static and final.

----------------------------------------------------
Can you use hashcode default implementation in interface ?

You cant give your default implementation of hashcode() in interface for all implementing classes to use.
We are not allowed to override Object class's method as default methods in interface else will get
compile time error "".
All implementing classes by default has access to all methods of object class.

----------------------------------------------------

How default methods in interfaces cope up with the diamond problem ?

So diamond problem arise when a class extends 2 classes there is ambiguity if both parent classes has
the same method with differnt implementation which one the child class will use.
This problem later was solved with the help of interface(because interface we dont need to provide the
implementation in the parent).

But after java1.8 with the arrival of default methods again interfaces can provide a default implementation
using default methods, diamond problem arises again.

How to resolve ?
In Java, in such situation, The code will NOT compile. But there is a solution as below :
Solution to diamond problem : use InterfaceName.super.methodName();

public class DiamondProblem implements I1, I2 {
    @Override
    public class m1() {
        I1.super.m1(); // or I2.super.m1() , here both I1, I2 has same default method m1().
    }
}

----------------------------------------------------
Why static methods were introduced in JAVA8 (in interfaces)?

Only reason for introducing static methods in interfaces is that you can call those methods with just
interface name. No need to create class and then its object.

Since interface can never contain :
 - Constructors.
 - static blocks.
 - nothing costly in terms of performance(class is costly in terms of memory and performance).

 Hence we dont need to create object and hence if you have everything static, then go for interface
 rather than class. You can use it for some utility methods.

 (You have this flexibility only after java8, before that you need to create a class).


----------------------------------------------------

Are static methods available to implementing classes by default ?
static methods are not available to implementing classes.
they are not default methods, they are static.
hence you can call these methods using interface name explicitly from the implementing classes as implementing
classes wont have access to these methods directly. (This is disadvantage of static methods of interface that 
its not available to implementing classes).

----------------------------------------------------
Predicates, Consumers, Suppliers, Functions, BiXXX, Streams, ParallelStreams -

What are predicates ?
Predicate is a predefined functional interface (having only 1 abstract method)
the only abstract method of predicate is test(T t) => public boolean test(T t){}
used whenever we want to check some boolean condition then you can go for Predicates.
Syntax : Predicate<String> checkLength = s -> s.length()>5;
checkLength.test("code decode"); // true;

input to a predicate can be anything like String, Integer, Employee so only 1 arg is required as input.
return type is not required as its always boolean only.

Advantages of predicates ?
THere is shorthand operation also which could have given same result(using ? and :) then why predicates
its because of its code reusability
If you have same conditions being used 100 times in a program then you can write once and just use 100 times
by using the test method(different strings can be tested).
Conditional checks are holded by functional interfaces.

WHat is predicate Joining ?
you can combine predicates in serial predicate
Three ways to join : And, Or, Negate
Eg if you want to test 2 conditions 
To check length of string>5
To check length is even 

So you can use 2 different predicates checkLength and checkEvenLength like this
checkLength.and(checkEvenLength).test("code decode"); equivalent to -> (s.length()%2==0 && s.length()>5).
Similarly you can do for Or and Negate(takes one argument, checkLength.negate().test("codeDecode") -> false).

----------------------------------------------------
What are functions ?
Function is also a predefined functional interface.
the only abs method for function is apply(T t).
Given some input, perform some operation on input and then produce / return result (not necessarily a boolean val)
Function takes 1 input and returns 1 output.
In predicate we used take 1 input and return type was always boolean
In function we take 1 input and return type is not fixed, hence we declare both input type and return type.



----------------------------------------------------


----------------------------------------------------


----------------------------------------------------

----------------------------------------------------