Difference b/w failfast and failsafe iterators ?

Failfast iterators - these throw ConcurrentModification Exception when one Thread is iterating
over collection object while other thread is structurally modifying COllection(adding, deleting, modifying)
objects on underlying collection, They are call failfast because they immediately throw exception when
they encounter failure.

FailSafe - doesnt throw any exception is modified structurally because they work on clone of the 
collection instead of the original Collection.

---------------------------------------------------

What do you understand by blocking Queue ?

The java BlockingQueue interface, java.util.concurrentBlockingQueue represents a queue which is thread safe
to put elements into and take elements out from, in other words multiple threads can be inserting and
taking elements concurrently from a java BlockingQueue, without any concurrency issue arising.

basically, its thread safe queue.

----------------------------------------------------

Difference b/w synchronized collection and concurrent collection ?

Both Synchronized and Concurrent Collection classes provide thread safety.
the difference between them comes in peformance, scalability and how they achieve thread safety
Synchronized collections like synchronized HashMap are much slower than their concurrent counterparts eg.
ConcurrentHashMap, Main reason for this slowness is Locking.

lets say our collection is  divided into segments s1, s2, s3, s4, and a thread tries write operation on s1
in case of synchronized all segments are locked by this thread and other threads have to wait.
While in concurrent collection only segment1 is locked for read and write while all other 3 segments are open 
for other threads. It is called lock striping.

----------------------------------------------------

Internal working of HashMap

HashMap in java works on hashing principle where a hash function are used to link key and value in HashMap,
Objects(Map.Entry -> contains both key and value object) are stored by calling put(key, value)method of
HashMap and retrieved by calling get(key) method.

When we call put method, hashCode() method of the key object is called which calculates an index of the 
bucket location where we can store the value object.

To retrieve, you call the get() method and again pass the key object, which lands you up at same index or 
bucket and you retrieve the value object.

Diagram - https://www.youtube.com/watch?v=KfoNYoVUBJI&t=1383s

In case of collision(multiple keys give same hashcode which gives same bucket number), a new node will be 
inserted after current node at the same bucket location in the form of linked list.

in case of get(key) operation it will get a bucket location (by getting hashCode of key)
 and then traverse the linked list present there starting from the first node and compare
 all keys of all nodes using equals() method until if finds it and returns the value.

 ----------------------------------------------------

Is Java pass by value or pass by reference ?

pass by value : from calling function we pass a copy of the variable and not the address so any change
    done to that variable in the other function will not reflect in the calling function variable.

pass by reference : we pass the original reference of the variable so any change done to that variable
    in that reference will also reflect in the calling function variable.

public class Animal{
    int eyes;
    protected String animalName ="mouse";
    public static void main(){
        Animal animalobj = new Animal();
        animalobj.eyes=2;
        int a = 3;
        changePrimitives(a);
        Syso("value of a is " +a); // 3, will retain original as while passing java changes its reference.
        changeObjectReference(animalobj);
        Syso(animalobj.eyes); // 12, it changed because we are passing a reference/memory address.
    }
    public static void changePrimitives(int aCopy) {
        aCopy = 13;
    }
    public static void changeObjectReference(Animal animalobjCopy){
        animalobjCopy = 12;
    }
}

By default if we pass the object, you are actually passing the reference hence change is reflected.
But for primitive types we can see that its not changed(it passes copy of variable inside different reference),
Hence Java is pass by value. 

 ----------------------------------------------------

 Why do we need Comparator and Comparable Interfaces in JAVA ?
  
  int[] arr = new int[]{3, 1, 5, 2};
  Arrays.sort(arr); // will sort the array

but for custom java objects like Employee, this is not true.
    Employee[] emparr = new Employee[4]; // then add some employees like {{1,"shiv"},{2,"abhi"}...}.
    This will throw an exception : cant cast Employee to java.lang.Comparable;

Hence we need Comparable and Comparator interface for custom objects in java.

1. To implement Comparable we need to implement Comparable interface in the Employee class.
2. also we need to override compareTo() method of Comparable interface.

public class Employee implements Comparable<T> {
    ...
    @Override 
    public int compareTo(Employee o) { 
        return this.id - o.id; // it can return 0, -ve, +ve
    }
}
Now this class cast exception will not come.

Now with comparable we can only do sorting based on one id, but if we want to use both id first(default) then
by name then we can use Comparator. ??

public class Employee implements Comparable<T> {
    ...
    @Override 
    public int compareTo(Employee o) { 
        return this.id - o.id; // it can return 0, -ve, +ve
    }
    
    public static Comparator<Employee> NameComparator = new Comparator<Employee>() { // anonymous class
        @Override
        public int compare(Employee e1, Employee e2) { 
            return e1.getName().compareTo(e2.getName());
        }
    }
}
in calling class =>  Arrays.sort(emparr, Employee.NameComparator);
// this will sort according to name.

 ----------------------------------------------------

Comparator Vs Comparable

comparable - 
1. There is no arg required in Arrays.sort();
2. belongs to java.lang so no import required where class is defined.
3. only natural ordering is possible, only one way(eg. using id).
4. source code requires to be changed, so if source code is 3rd party we cant change that.

comparator -
1. We need to pass Comparator object as an additional parameter to Arrays.sort()
2. belongs to java.util package.
3. We can create n number of compartors and based on different fields we can do sorting.
4. No need to change source code (Employee class), simply create a Comparator class and use it to sort.

 ----------------------------------------------------
Equals and HashCode contract - 

public class Employee {
    private int id; private String name;
    // getters setters
    
    // @Override ?? need or not ?
    public boolean equals(Object o) {
        if(o==null || getClass() != o.getClass()) {
            return false;
        } else if(o == this) {
            return true; // if same reference then its the same object, no need to check details.
        } else {
            Employee e = (Employee) o;
            return (this.getId() == e.getId());

        }
    }
}
public class Main{
    psvm() {
        Employee e1 = new Employee();
        e1.setId(1); e1.setName("John");
        Employee e2 = new Employee();
        e1.setId(1); e1.setName("John");

// below does the memory comparison
        Syso("shallow comparison", (e1==e2)); // False 
// below does the memory comparison and internal details also
        Syso("deep comparison", (e1.equals(e2))) // False 

// now we want to make sure 2 objects are same if their id is same, for that we will orverride equals 
    method in the Employee class

// below is after implementing equals method, shallow comparison will be false
Syso("deep comparison", (e1.equals(e2))) // True 

    }
}

EQUALS and HASHCODE contract :

1. if 2 objs are equal according to the equals(Object o) method, then hashcode of both the object must 
be the same.

2. if 2 objs have same hashcode, doesnt mean that those 2 objects are equal, this is case of collision, can
be prevented by using better hash function.

3. Also the hashcode() function must return the same integer(hashcode) consistently
 every time its invoked on a particular object.


IN the above code we dint override the hashcode method.
NOw lets say there are 2 objects e1 and e2 which are equal according to equals() but they have different
hashcodes(which means they will fall into differnt buckets). So its logically wrong.
https://www.youtube.com/watch?v=4X5Kgi2VltI&t=666s

So we need to override hashcode method also.

class Employee{
    ...

    public int hashCode() {
        return getId(); // id is different and integer, also prime number can be used.
    }
}


----------------------------------------------------

Is restricted access to derived method allowed ?

eg: parent class have method public calculate() and child class have either of the following
    private calculate(), protected calculate(), calculate() // default

Ans : in derived, it will give compile time error. TO resolve, make same access to both or child should 
have more visibilty.
child can not be more restricted.

----------------------------------------------------

Shadowing of static methods :
class A{
    public void meth1(){syso("A method");}
}
class B extends A{
    public void meth1(){syso("B method");}
}
class Main{
    psvm(){
        A a = new B(); 
        a.meth1(); // B method (means based on memory allocation method is decided)
        A a1 = new A(); 
        a1.meth1(); // A method (means based on memory allocation method is decided)
    }
}
------------------
Now lets use static methods :
------------------
class A{
    public static void meth1(){syso("A method");}
}
class B extends A{
    public static void meth1(){syso("B method");}
}
class Main{
    psvm(){
        A a = new B(); 
        a.meth1(); // A method (means based on reference variable method is decided)
        A a1 = new A(); 
        a1.meth1(); // A method (means based on reference variable method is decided)
    }
}
Note: we need to give static in both parent and child class or else it will give compile error.

----------------------------------------------------
23:18
Association 

association depicts the relationships between 2 classes. 2 types:
1. Aggregation : weak association(loose coupling)
Eg. public class Driver{ private Car car;}
Here both objects can exist independently. there is a relationship b/w both but a car can
exist without driver and also a driver can exist without a car. 
A car has a driver. A driver has a Car. But both are independent.

2. Composition : strong association (tight coupling)
Eg. Car and its Engine. (Engine cant exist without the Car)
public class Car{ private Engine engine; }
Here both objects can not exist independently. One object cannot exist without the owner object.

----------------------------------------------------
What is Covariant return type in java ?

Covariant return type means return type may vary during overriding.
Before java 5 it was not allowed to override any method if return type is changed in child class.
But now its possible only if return type is subclass type.

parent has method : public Object methodA(){}; // Object return type
child has method : public Object methodA(){}; // Object return type(same as parent overriden methodA)

then post java 5, both case 1 and case 2 are valid scenarios and overriding will work fine.

parent has method : public Object methodA(){}; // Object return type
child has method : public String methodA(){};  // String return type(child of parent methodA return type Object)
    "String class is child of Object".

----------------------------------------------------
Exception Handling Interview questions basic level

1. Whats an exception ?

its an abnormal condition which occurs during the execution of a program and disrupts normal flow 
of the program. If not handled properly, it can cause the program to terminate abruptly.

eg. class Dog { public String dogName = "Tommy";}
psvm {
    Dog dog = null;
    Syso(dog.dogName); // will throw NullPointerException.
}

2. How to handle such exceptions ?
exceptions are handled using 3 blocks :
Try : encloses set of statmenets which can throw exception hence are required to be monitored.
Catch : When exception occur, this block catches that exception and work accordingly to handle it or
        throw it as required.
Finally : This block gets executed always regardless of exception occurence. Hence cleanup is done here.
         (if in try we have opened some fileStreams or db connection then we can close it in finally)
psvm {
    Dog dog = null;
    try{
        Syso(dog.dogName); // will throw NullPointerException.
    }catch(NullPointerException e) {
        dog = new Dog();
        Syso(dog.dogName);
    }
}

3. Hierarchy of Exception :

                                    Throwable class
                Exception                                           Error

    Checked               Unchecked

Checked Exception  : IO exception, SQLException, ClassNotFoundException
Unchecked Exception : NullPointerException, NumberFormatException, IndexOutOfBoundException

Error : StackOverflow Error, OutOfMemory Error, Virtual Machine error.


----------------------------------------------------

----------------------------------------------------